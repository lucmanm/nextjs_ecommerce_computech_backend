generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  languageId String
  language   Language  @relation(fields: [languageId], references: [id])
  product    Product[]
}

model Brand {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  languageId String
  language   Language  @relation(fields: [languageId], references: [id])
  product    Product[]
}

model Product {
  id                 String   @id @default(uuid())
  model              String
  stock              Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  isFeatured         Boolean  @default(false)
  isLive             Boolean  @default(true)
  price              Decimal
  taxValue           Decimal
  brandId            String
  categoryId         String
  shortDescriptionAr String
  shortDescriptionEn String
  Brand              Brand    @relation(fields: [brandId], references: [id])
  category           Category @relation(fields: [categoryId], references: [id])
}

model Slider {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  languageId String
  language   Language @relation(fields: [languageId], references: [id])
}

model Language {
  id          String     @id @default(uuid())
  code        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  description String
  Brand       Brand[]
  Category    Category[]
  Slider      Slider[]
}
