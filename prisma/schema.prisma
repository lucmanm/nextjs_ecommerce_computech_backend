generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  name          String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id           String    @id @default(uuid())
  name         String    @unique
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  languageCode String
  language     Language  @relation(fields: [languageCode], references: [languageCode])
  product      Product[]
}

model Brand {
  id           String    @id @default(uuid())
  name         String    @unique
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  product      Product[]
  languageCode String
  language     Language  @relation(fields: [languageCode], references: [languageCode])
}

model Product {
  id                 String       @id @default(uuid())
  model              String       @unique
  stock              Int
  isFeatured         Boolean      @default(false)
  isLive             Boolean      @default(true)
  price              Decimal
  taxValue           Decimal
  brandName          String?
  categoryName       String?
  groupName          String
  shortDescriptionAr String       @unique
  shortDescriptionEn String       @unique
  Brand              Brand?       @relation(fields: [brandName], references: [name])
  category           Category?    @relation(fields: [categoryName], references: [name])
  groupProduct       GroupProduct @relation(fields: [groupName], references: [name])
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model GroupProduct {
  id           String    @id @default(uuid())
  name         String    @unique
  language     Language  @relation(fields: [languagecode], references: [languageCode])
  languagecode String    
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Product      Product[]
}

model Slider {
  id           String    @id @default(uuid())
  name         String
  imageUrl     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  languageId   String
  Language     Language? @relation(fields: [languageCode], references: [languageCode])
  languageCode String?
}

model Language {
  languageCode String         @unique 
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  languageName String         @unique 
  Brand        Brand[]
  Category     Category[]
  Slider       Slider[]
  GroupProduct GroupProduct[]
}
